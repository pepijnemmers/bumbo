@model BumboApp.ViewModels.NormsViewModel
@{
    ViewData["Title"] = "Normeringen";
}
<div class="table-container latest-norms-table col-12 col-lg-6">
    <div id="viewTable">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Activiteiten</th>
                    <th scope="col">Norm</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @if ((Model.LatestNormsList != null && Model.LatestNormsList.Any()))
                {
                    foreach (var item in Model.LatestNormsList)
                    {
                        <tr>
                            <th scope="row">@item.Activity.ToFriendlyString()</th>
                            <td>@item.Value</td>
                            <td><b>@item.NormType.ToFriendlyString()</b></td>
                        </tr>
                    }
                }
                else
                {
                    foreach (NormActivity activity in Enum.GetValues(typeof(NormActivity)))
                    {
                        <tr>
                            <th scope="row">@activity.ToFriendlyString()</th>
                            <td>...</td>
                            <td>
                                <b>
                                    @switch (activity)
                                    {
                                        case NormActivity.ColiUitladen:
                                            @NormType.Minutes.ToFriendlyString();
                                            break;
                                        case NormActivity.VakkenVullen:
                                            @NormType.MinutesPerColi.ToFriendlyString();
                                            break;
                                        case NormActivity.Kassa:
                                            @NormType.CustomersPerHour.ToFriendlyString();
                                            break;
                                        case NormActivity.Vers:
                                            @NormType.CustomersPerHour.ToFriendlyString();
                                            break;
                                        default:
                                            @NormType.SecondsPerMeter.ToFriendlyString();
                                            break;
                                    }
                                </b>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="edit-button">
            <button type="button" class="btn btn-primary" onclick="showEditForm()">Bewerken</button>
        </div>
    </div>

    <div id="editForm" style="display:none;">
        <form asp-controller="Norms" asp-action="Add" method="post">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Activiteiten</th>
                        <th scope="col">Norm</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.LatestNormsList != null && Model.LatestNormsList.Any())
                    {
                        for (int i = 0; i < Model.LatestNormsList.Count; i++)
                        {
                            <tr>
                                <th scope="row">@Model.LatestNormsList[i].Activity.ToFriendlyString()</th>
                                <td>
                                    <input type="number" name="AddNormsList[@i].Value" value="@Model.LatestNormsList[i].Value" class="form-control" min="0" required />
                                    <input type="hidden" name="AddNormsList[@i].Activity" value="@Model.LatestNormsList[i].Activity" />
                                    <input type="hidden" name="AddNormsList[@i].NormType" value="@Model.LatestNormsList[i].NormType" />
                                </td>
                                <td><b>@Model.LatestNormsList[i].NormType.ToFriendlyString()</b></td>
                            </tr>
                        }
                    }
                    else
                    {
                        int counter = 0;
                        foreach (NormActivity activity in Enum.GetValues(typeof(NormActivity)))
                        {
                            <tr>
                                <th scope="row">@activity.ToFriendlyString()</th>
                                <td>
                                    <input type="number" name="AddNormsList[@counter].Value" class="form-control" min="0" required />
                                    <input type="hidden" name="AddNormsList[@counter].Activity" value="@activity" />
                                    <input type="hidden" name="AddNormsList[@counter].NormType" value="@switch (activity)
                                        {
                                            case NormActivity.ColiUitladen:
                                                @NormType.Minutes.ToFriendlyString()
;
                                                break;
                                            case NormActivity.VakkenVullen:
                                                @NormType.MinutesPerColi.ToFriendlyString()
;
                                                break;
                                            case NormActivity.Kassa:
                                                @NormType.CustomersPerHour.ToFriendlyString()
;
                                                break;
                                            case NormActivity.Vers:
                                                @NormType.CustomersPerHour.ToFriendlyString()
;
                                                break;
                                            default:
                                                @NormType.SecondsPerMeter.ToFriendlyString()
;
                                                break;
                                        }" />
                                </td>
                                <td>
                                    <b>
                                        @switch (activity)
                                        {
                                            case NormActivity.ColiUitladen:
                                                @NormType.Minutes.ToFriendlyString()
                                                ;
                                                break;
                                            case NormActivity.VakkenVullen:
                                                @NormType.MinutesPerColi.ToFriendlyString()
                                                ;
                                                break;
                                            case NormActivity.Kassa:
                                                @NormType.CustomersPerHour.ToFriendlyString()
                                                ;
                                                break;
                                            case NormActivity.Vers:
                                                @NormType.CustomersPerHour.ToFriendlyString()
                                                ;
                                                break;
                                            default:
                                                @NormType.SecondsPerMeter.ToFriendlyString()
                                                ;
                                                break;
                                        }
                                    </b>
                                </td>
                            </tr>
                            counter++;
                        }
                    }
                </tbody>
            </table>
            <div class="edit-button">
                <button type="button" class="btn btn-outline-primary" onclick="cancelEdit()">Annuleren</button>
                <button type="submit" class="btn btn-primary">Opslaan</button>
            </div>
        </form>
    </div>
</div>

<div class="table-container all-norms-table">
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Datum</th>
            <th scope="col">Coli uitladen</th>
            <th scope="col">Vakken vullen</th>
            <th scope="col">Kassa</th>
            <th scope="col">Vers</th>
            <th scope="col">Spiegelen</th>
        </tr>
        </thead>
        <tbody>
        @if (Model.NormsList.Any())
        {
            @foreach (var item in Model.NormsList.GroupBy(i => i.CreatedAt))
            {
                <tr>
                    <td>@item.Key.ToShortDateString()</td>
                    <td>
                        @foreach (var activityItem in item.Where(i => i.Activity == NormActivity.ColiUitladen))
                        {
                            <p>@activityItem.Value</p>
                        }
                    </td>
                    <td>
                        @foreach (var activityItem in item.Where(i => i.Activity == NormActivity.VakkenVullen))
                        {
                            <p>@activityItem.Value</p>
                        }
                    </td>
                    <td>
                        @foreach (var activityItem in item.Where(i => i.Activity == NormActivity.Kassa))
                        {
                            <p>@activityItem.Value</p>
                        }
                    </td>
                    <td>
                        @foreach (var activityItem in item.Where(i => i.Activity == NormActivity.Vers))
                        {
                            <p>@activityItem.Value</p>
                        }
                    </td>
                    <td>
                        @foreach (var activityItem in item.Where(i => i.Activity == NormActivity.Spiegelen))
                        {
                            <p>@activityItem.Value</p>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="100%" class="text-center">Er zijn geen eerdere normeringen</td>
            </tr>
        }
        </tbody>
    </table>
    
    @if (ViewBag.MaxPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-end px-3">
                <li class="page-item @(ViewBag.PageNumber == 1 ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(ViewBag.PageNumber - 1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                @for (int i = 1; i <= ViewBag.MaxPages; i++)
                {
                <li class="page-item @(ViewBag.PageNumber == i ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
                </li>
                }
                <li class="page-item @(ViewBag.PageNumber == ViewBag.MaxPages ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(ViewBag.PageNumber + 1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    }
</div>



<script>
    function showEditForm() {
        document.getElementById('viewTable').style.display = 'none';
        document.getElementById('editForm').style.display = 'block';
    }

    function cancelEdit() {
        document.getElementById('viewTable').style.display = 'block';
        document.getElementById('editForm').style.display = 'none';
    }
</script>
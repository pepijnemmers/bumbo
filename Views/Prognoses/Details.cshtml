@using System.Globalization
@using BumboApp.Views.Components
@using Microsoft.Data.SqlClient
@model BumboApp.ViewModels.WeekPrognosisViewModel

@{
    ViewData["Title"] = "Prognose details";
}

<div class="row justify-content-between align-items-center">
    <h2 class="col d-none d-lg-block">Prognose week @Model.WeekNr</h2>
    <div class="col-12 mb-2 mb-lg-0 col-lg text-center text-lg-end">
        <a asp-controller="Prognoses" asp-action="Details" asp-route-id="@Model.StartDate.AddDays(-7).ToString("dd-MM-yyyy")">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M15 18L9 12L15 6" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </a>
        <strong>
            Week @Model.WeekNr
        </strong>
        (@Model.StartDate.ToString("dd/MM/yyyy") - @Model.StartDate.AddDays(6).ToString("dd/MM/yyyy"))
        <a asp-controller="Prognoses" asp-action="Details" asp-route-id="@Model.StartDate.AddDays(7).ToString("dd-MM-yyyy")">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 18L15 12L9 6" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </a>
    </div>
</div>

@if (!Model.Prognoses.Any())
{
    <div class="table-container p-3">Geen prognose voor deze week</div>
}
else
{
    <div class="d-lg-none">
        <p class="alert alert-warning" role="alert">Deze pagina is niet beschikbaar op mobiel. Gebruik een desktop.</p>
    </div>

    <div class="table-container d-none d-lg-block">
        <div id="overview">
            <table class="table">
                <thead>
                    <tr>
                        <th>Afdeling</th>
                        @for (int i = 0; i < 7; i++)
                        {
                            <th>@Model.DutchDays[i]</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (Department department in Enum.GetValues(typeof(Department)))
                    {
                        <tr>
                            <td>@department</td>
                            @for (int i = 0; i < 7; i++)
                            {
                                DayOfWeek day = (DayOfWeek)((i + 1) % 7); //necessary to start with monday rather than sunday
                                var prognosis = Model.Prognoses.SingleOrDefault(p => p.Department == department && p.Date.DayOfWeek == day);

                                <td>
                                    @if (prognosis != null)
                                    {
                                        <p>@prognosis.NeededEmployees | @prognosis.NeededHours</p>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <form id="form" style="display: none" asp-action="Update" method="post">
            <input type="hidden" name="id" value="@Model.StartDate.ToString("dd-MM-yyyy")" />
            <table class="table">
                <thead>
                    <tr>
                        <th>Afdeling</th>
                        @for (int i = 0; i < 7; i++)
                        {
                            <th>@Model.DutchDays[i]</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        // set localization to en-GB
                        CultureInfo.CurrentCulture = new CultureInfo("en-GB");
                    }
                    @foreach (Department department in Enum.GetValues(typeof(Department)))
                    {
                        <tr>
                            <td>@department</td>
                            @for (int i = 0; i < 7; i++)
                            {
                                DayOfWeek day = (DayOfWeek)((i + 1) % 7); //necessary to start with monday rather than sunday
                                var prognosis = Model.Prognoses.SingleOrDefault(p => p.Department == department && p.Date.DayOfWeek == day);

                                <td>
                                    @if (prognosis != null)
                                    {
                                        <div class="input-group mb-2">
                                            <input type="hidden" name="Prognoses[@Model.Prognoses.IndexOf(prognosis)].Id" value="@prognosis.Id" />
                                            <input type="hidden" name="Prognoses[@Model.Prognoses.IndexOf(prognosis)].Date" value="@prognosis.Date" />
                                            <input type="hidden" name="Prognoses[@Model.Prognoses.IndexOf(prognosis)].Department" value="@prognosis.Department" />

                                            <input id="@day+@department-employees"
                                                   class="form-control form-control-sm"
                                                   type="number"
                                                   value="@prognosis.NeededEmployees"
                                                   min="0" max="1000" step="0.125"
                                                   oninput="updateHours('@day+@department'); updateEmployeesHidden('@day+@department', this)"
                                                   onchange="updateEmployeesHidden('@day+@department', this)">
                                            <input id="@day+@department-employeesHidden"
                                                   name="Prognoses[@Model.Prognoses.IndexOf(prognosis)].NeededEmployees"
                                                   value="@prognosis.NeededEmployees.ToString(CultureInfo.CurrentCulture).Replace('.', ',')"
                                                   type="hidden">

                                            <input id="@day+@department-hours"
                                                   class="form-control form-control-sm"
                                                   type="number"
                                                   value="@prognosis.NeededHours"
                                                   min="0" max="8000" step="1"
                                                   oninput="updateEmployees('@day+@department'); updateHoursHidden('@day+@department', this)"
                                                    onchange="updateHoursHidden('@day+@department', this)">
                                            <input id="@day+@department-hoursHidden"
                                                   name="Prognoses[@Model.Prognoses.IndexOf(prognosis)].NeededHours"
                                                   value="@prognosis.NeededHours.ToString(CultureInfo.CurrentCulture).Replace('.', ',')"
                                                   type="hidden">
                                        </div>
                                    }
                                </td>
                            }
                        </tr>
                    }
                    @{
                        // reset localization to nl-NL
                        CultureInfo.CurrentCulture = new CultureInfo("nl-NL");
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-end m-3">
                <div class="w-auto">
                    <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">Verwijderen</button>
                    <button type="submit" class="btn btn-primary">Opslaan</button>
                </div>
            </div>
        </form>

        <div class="d-lg-flex d-none justify-content-between p-3 pt-0">
            <div>
                <strong>Legenda</strong><br />
                <em>aantal medewerkers | aantal uur</em>
            </div>
            <div>
                <button id="prognosisEditButton" class="btn btn-primary w-auto" @(Model.StartDate <= Model.CurrentDate ? "disabled" : "")>bewerken </button>
            </div>
        </div>
    </div>
    
    <div class="col-12 col-xl-5">
        <div class="table-container">
            <div class="p-3 pb-0">
                <div class="d-flex justify-content-between">
                    <h3>Speciale dagen</h3>
                    <a asp-controller="UniqueDays" asp-action="Add" class="btn btn-primary">Toevoegen</a>
                </div>
                <p>Prognose wordt vermenigvuldigd met de factor</p>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Naam</th>
                        <th class="col-5">
                            <a asp-controller="Prognoses" 
                               asp-action="Details"
                               asp-route-OrderBy="@(ViewBag.OrderBy == SortOrder.Ascending ? SortOrder.Descending : SortOrder.Ascending)"
                               asp-route-Id="@Model.StartDate.ToString("dd-MM-yyyy")"
                               class="text-decoration-none text-dark d-flex align-items-center">
                                <div class="me-2">
                                    Startdatum <br/>
                                    Einddatum
                                </div>
                                <img width="20px" src="~/img/chevron-@(ViewBag.OrderBy == SortOrder.Ascending ? "down" : "up").svg" alt="Arrow" />
                            </a>
                        </th>
                        <th class=" col-3">Factor</th>
                        <th>Acties</th>
                    </tr>
                </thead>
                <tbody>
                    @if(ViewBag.UniqueDays.Count == 0)
                    {
                        <!-- Display this alert if there are unique days -->
                        <tr>
                            <td colspan="100%" class="text-center">Er zijn geen Speciale dagen</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in ViewBag.UniqueDays)
                        {
                            <tr>
                                <td>
                                    @item.Name
                                </td>
                                <td class=" col-5">
                                    @item.StartDate <br>
                                    @item.EndDate
                                </td>
                                <td class=" col-3">
                                    @item.Factor
                                </td>
                                <td>
                                    @if (item.StartDate > DateOnly.FromDateTime(DateTime.Now))
                                    {
                                        <a asp-controller="UniqueDays" asp-action="Edit" asp-route-id="@item.Id">
                                            <img width="20px" src="~/img/update-icon.svg" alt="Alternate Text" />
                                        </a>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            @if (ViewBag.MaxPages > 1)
            {
                <Component type="typeof(Pagination)"
                       render-mode="ServerPrerendered"
                       param-PageNumber="ViewBag.PageNumber"
                       param-MaxPages="ViewBag.MaxPages" />
            }
            
        </div>
    </div>
}

<div class="modal fade align-content-center" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Bevestiging verwijderen</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Weet je zeker dat je deze prognose wil verwijderen?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuleren</button>
                <form id="deleteForm" method="post" asp-action="Delete" asp-controller="Prognoses" asp-route-weekPrognoseId="@Model.WeekPrognoseId">
                    <button type="submit" class="btn btn-danger">Verwijderen</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        //Prognoses details
        document.getElementById('prognosisEditButton').addEventListener('click', function () {
            const form = document.getElementById("form");
            const overview = document.getElementById("overview");
            const prognosisEditButton = document.getElementById("prognosisEditButton");

            if (form.style.display === "none") {
                overview.style.display = "none";
                form.style.display = "block";
                prognosisEditButton.textContent = "annuleren";
            } else {
                form.style.display = "none";
                overview.style.display = "flex";
                prognosisEditButton.textContent = "bewerken";
            }
        });

        function updateHours(id) {
            let employeesInput = document.getElementById(id + '-employees');
            let hoursInput = document.getElementById(id + '-hours');

            let employees = employeesInput.value;
            hoursInput.value = employees * 8;
        }

        function updateEmployees(id) {
            let hoursInput = document.getElementById(id + '-hours');
            let employeesInput = document.getElementById(id + '-employees');
            let hours = hoursInput.value;
            employeesInput.value = hours / 8;
        }
        
        function updateEmployeesHidden(id, element) {
            const valueToSet = element.value;
            document.getElementById(id + '-employeesHidden').value = normalizeNumber(valueToSet);
            document.getElementById(id + '-hoursHidden').value = normalizeNumber(valueToSet * 8);
        }
        
        function updateHoursHidden(id, element) {
            const valueToSet = element.value;
            document.getElementById(id + '-hoursHidden').value = normalizeNumber(valueToSet);
            document.getElementById(id + '-employeesHidden').value = normalizeNumber(valueToSet / 8);
        }
        
        function normalizeNumber(value) {
            value = value.toString();
            return value.includes('.') ? value.replace('.', ',') : value;
        }
    </script>
}

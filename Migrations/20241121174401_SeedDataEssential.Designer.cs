// <auto-generated />
using System;
using BumboApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BumboApp.Migrations
{
    [DbContext(typeof(BumboDbContext))]
    [Migration("20241121174401_SeedDataEssential")]
    partial class SeedDataEssential
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BumboApp.Models.Availability", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("EmployeeNumber", "Date");

                    b.ToTable("Availabilities", t =>
                        {
                            t.HasCheckConstraint("CK_Availability_StartTime_EndTime", "[StartTime] < [EndTime]");
                        });
                });

            modelBuilder.Entity("BumboApp.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeNumber"));

                    b.Property<int>("ContractHours")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EndOfEmployment")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("StartOfEmployment")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("EmployeeNumber");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", t =>
                        {
                            t.HasCheckConstraint("CK_Employees_StartOfEmployment_EndOfEmployment", "[StartOfEmployment] <= [EndOfEmployment]");

                            t.HasCheckConstraint("CK_Employees_Zipcode", "[Zipcode] LIKE '[1-9][0-9][0-9][0-9][A-Z][A-Z]'");
                        });
                });

            modelBuilder.Entity("BumboApp.Models.Expectation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ExpectedCargo")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedCustomers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("Expectations");
                });

            modelBuilder.Entity("BumboApp.Models.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumber");

                    b.ToTable("LeaveRequests", t =>
                        {
                            t.HasCheckConstraint("CK_LeaveRequests_StartDate_EndDate", "[StartDate] <= [EndDate]");
                        });
                });

            modelBuilder.Entity("BumboApp.Models.Norm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NormType")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Norms");
                });

            modelBuilder.Entity("BumboApp.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumber");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BumboApp.Models.OpeningHour", b =>
                {
                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("WeekDay");

                    b.ToTable("OpeningHours", t =>
                        {
                            t.HasCheckConstraint("CK_OpeningHours_OpeningTime_ClosingTime", "([OpeningTime] IS NULL AND [ClosingTime] IS NULL) OR ([OpeningTime] IS NOT NULL AND [ClosingTime] IS NOT NULL AND [OpeningTime] < [ClosingTime])");
                        });

                    b.HasData(
                        new
                        {
                            WeekDay = 1,
                            ClosingTime = new TimeOnly(21, 0, 0),
                            OpeningTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            WeekDay = 2,
                            ClosingTime = new TimeOnly(21, 0, 0),
                            OpeningTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            WeekDay = 3,
                            ClosingTime = new TimeOnly(21, 0, 0),
                            OpeningTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            WeekDay = 4,
                            ClosingTime = new TimeOnly(21, 0, 0),
                            OpeningTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            WeekDay = 5,
                            ClosingTime = new TimeOnly(21, 0, 0),
                            OpeningTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            WeekDay = 6,
                            ClosingTime = new TimeOnly(20, 0, 0),
                            OpeningTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            WeekDay = 0
                        });
                });

            modelBuilder.Entity("BumboApp.Models.Prognosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<float>("NeededEmployees")
                        .HasColumnType("real");

                    b.Property<float>("NeededHours")
                        .HasColumnType("real");

                    b.Property<int>("WeekPrognosisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeekPrognosisId");

                    b.HasIndex("Date", "Department")
                        .IsUnique();

                    b.ToTable("Prognoses", t =>
                        {
                            t.HasCheckConstraint("CK_Prognoses_NeededHours_NeededEmployees", "[NeededHours] = [NeededEmployees] * 8");
                        });
                });

            modelBuilder.Entity("BumboApp.Models.SchoolSchedule", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<float>("DurationInHours")
                        .HasColumnType("real");

                    b.HasKey("EmployeeNumber", "Date");

                    b.ToTable("SchoolSchedules");
                });

            modelBuilder.Entity("BumboApp.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumber");

                    b.ToTable("Shifts", t =>
                        {
                            t.HasCheckConstraint("CK_Shifts_Start_End", "[Start] < [End]");
                        });
                });

            modelBuilder.Entity("BumboApp.Models.ShiftTakeOver", b =>
                {
                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeTakingOverEmployeeNumber")
                        .HasColumnType("int");

                    b.HasKey("ShiftId");

                    b.HasIndex("EmployeeTakingOverEmployeeNumber");

                    b.ToTable("ShiftTakeOvers");
                });

            modelBuilder.Entity("BumboApp.Models.SickLeave", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("EmployeeNumber", "Date");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("BumboApp.Models.UniqueDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("UniqueDays", t =>
                        {
                            t.HasCheckConstraint("CK_UniqueDays_StartDate_EndDate", "[StartDate] <= [EndDate]");
                        });
                });

            modelBuilder.Entity("BumboApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BumboApp.Models.WeekPrognosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StartDate")
                        .IsUnique();

                    b.ToTable("WeekPrognoses");
                });

            modelBuilder.Entity("BumboApp.Models.Availability", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "Employee")
                        .WithMany("Availabilities")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BumboApp.Models.Employee", b =>
                {
                    b.HasOne("BumboApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BumboApp.Models.LeaveRequest", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "Employee")
                        .WithMany("leaveRequests")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BumboApp.Models.Notification", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "Employee")
                        .WithMany("notifications")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BumboApp.Models.Prognosis", b =>
                {
                    b.HasOne("BumboApp.Models.WeekPrognosis", null)
                        .WithMany("Prognoses")
                        .HasForeignKey("WeekPrognosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BumboApp.Models.SchoolSchedule", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "Employee")
                        .WithMany("SchoolSchedules")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BumboApp.Models.Shift", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BumboApp.Models.ShiftTakeOver", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "EmployeeTakingOver")
                        .WithMany("shiftTakeOvers")
                        .HasForeignKey("EmployeeTakingOverEmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BumboApp.Models.Shift", "Shift")
                        .WithOne("ShiftTakeOver")
                        .HasForeignKey("BumboApp.Models.ShiftTakeOver", "ShiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EmployeeTakingOver");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("BumboApp.Models.SickLeave", b =>
                {
                    b.HasOne("BumboApp.Models.Employee", "Employee")
                        .WithMany("sickLeaves")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BumboApp.Models.Employee", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("SchoolSchedules");

                    b.Navigation("Shifts");

                    b.Navigation("leaveRequests");

                    b.Navigation("notifications");

                    b.Navigation("shiftTakeOvers");

                    b.Navigation("sickLeaves");
                });

            modelBuilder.Entity("BumboApp.Models.Shift", b =>
                {
                    b.Navigation("ShiftTakeOver")
                        .IsRequired();
                });

            modelBuilder.Entity("BumboApp.Models.WeekPrognosis", b =>
                {
                    b.Navigation("Prognoses");
                });
#pragma warning restore 612, 618
        }
    }
}
